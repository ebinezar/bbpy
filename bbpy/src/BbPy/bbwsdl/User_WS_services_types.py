################################################## 
# User_WS_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://user.ws.blackboard
##############################

class user_ns1:
    targetNamespace = "http://user.ws.blackboard"

    class getServerVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersion"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getServerVersion_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"unused"), aname="_unused", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getServerVersion")
            kw["aname"] = "_getServerVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unused = None
                    return
            Holder.__name__ = "getServerVersion_Holder"
            self.pyclass = Holder

    class getServerVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersionResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getServerVersionResponse_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getServerVersionResponse")
            kw["aname"] = "_getServerVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getServerVersionResponse_Holder"
            self.pyclass = Holder

    class getAddressBookEntry_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAddressBookEntry"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getAddressBookEntry_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","UserFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getAddressBookEntry")
            kw["aname"] = "_getAddressBookEntry"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    return
            Holder.__name__ = "getAddressBookEntry_Holder"
            self.pyclass = Holder

    class getAddressBookEntryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAddressBookEntryResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getAddressBookEntryResponse_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","AddressBookEntryVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getAddressBookEntryResponse")
            kw["aname"] = "_getAddressBookEntryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getAddressBookEntryResponse_Holder"
            self.pyclass = Holder

    class getObservee_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObservee"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getObservee_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"observerId"), aname="_observerId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getObservee")
            kw["aname"] = "_getObservee"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._observerId = []
                    return
            Holder.__name__ = "getObservee_Holder"
            self.pyclass = Holder

    class getObserveeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getObserveeResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getObserveeResponse_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","ObserverAssociationVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getObserveeResponse")
            kw["aname"] = "_getObserveeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getObserveeResponse_Holder"
            self.pyclass = Holder

    class getInstitutionRoles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInstitutionRoles"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getInstitutionRoles_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ids"), aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getInstitutionRoles")
            kw["aname"] = "_getInstitutionRoles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ids = []
                    return
            Holder.__name__ = "getInstitutionRoles_Holder"
            self.pyclass = Holder

    class getInstitutionRolesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getInstitutionRolesResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getInstitutionRolesResponse_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","PortalRoleVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getInstitutionRolesResponse")
            kw["aname"] = "_getInstitutionRolesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getInstitutionRolesResponse_Holder"
            self.pyclass = Holder

    class getUserInstitutionRoles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUserInstitutionRoles"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getUserInstitutionRoles_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"userId"), aname="_userId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getUserInstitutionRoles")
            kw["aname"] = "_getUserInstitutionRoles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = []
                    return
            Holder.__name__ = "getUserInstitutionRoles_Holder"
            self.pyclass = Holder

    class getUserInstitutionRolesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUserInstitutionRolesResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getUserInstitutionRolesResponse_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","UserRoleVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getUserInstitutionRolesResponse")
            kw["aname"] = "_getUserInstitutionRolesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getUserInstitutionRolesResponse_Holder"
            self.pyclass = Holder

    class getUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUser"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getUser_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","UserFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getUser")
            kw["aname"] = "_getUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    return
            Holder.__name__ = "getUser_Holder"
            self.pyclass = Holder

    class getUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getUserResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getUserResponse_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","UserVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getUserResponse")
            kw["aname"] = "_getUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getUserResponse_Holder"
            self.pyclass = Holder

    class changeUserBatchUid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeUserBatchUid"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.changeUserBatchUid_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"originalBatchUid"), aname="_originalBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"batchUid"), aname="_batchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","changeUserBatchUid")
            kw["aname"] = "_changeUserBatchUid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._originalBatchUid = None
                    self._batchUid = None
                    return
            Holder.__name__ = "changeUserBatchUid_Holder"
            self.pyclass = Holder

    class changeUserBatchUidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeUserBatchUidResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.changeUserBatchUidResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","changeUserBatchUidResponse")
            kw["aname"] = "_changeUserBatchUidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeUserBatchUidResponse_Holder"
            self.pyclass = Holder

    class changeUserDataSourceId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeUserDataSourceId"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.changeUserDataSourceId_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"userId"), aname="_userId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","changeUserDataSourceId")
            kw["aname"] = "_changeUserDataSourceId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = None
                    self._dataSourceId = None
                    return
            Holder.__name__ = "changeUserDataSourceId_Holder"
            self.pyclass = Holder

    class changeUserDataSourceIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeUserDataSourceIdResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.changeUserDataSourceIdResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","changeUserDataSourceIdResponse")
            kw["aname"] = "_changeUserDataSourceIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeUserDataSourceIdResponse_Holder"
            self.pyclass = Holder

    class initializeUserWS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeUserWS"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.initializeUserWS_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ignore"), aname="_ignore", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","initializeUserWS")
            kw["aname"] = "_initializeUserWS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ignore = None
                    return
            Holder.__name__ = "initializeUserWS_Holder"
            self.pyclass = Holder

    class initializeUserWSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeUserWSResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.initializeUserWSResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","initializeUserWSResponse")
            kw["aname"] = "_initializeUserWSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "initializeUserWSResponse_Holder"
            self.pyclass = Holder

    class deleteAddressBookEntry_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteAddressBookEntry"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteAddressBookEntry_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"entryId"), aname="_entryId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteAddressBookEntry")
            kw["aname"] = "_deleteAddressBookEntry"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._entryId = []
                    return
            Holder.__name__ = "deleteAddressBookEntry_Holder"
            self.pyclass = Holder

    class deleteAddressBookEntryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteAddressBookEntryResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteAddressBookEntryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteAddressBookEntryResponse")
            kw["aname"] = "_deleteAddressBookEntryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteAddressBookEntryResponse_Holder"
            self.pyclass = Holder

    class deleteObserverAssociation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteObserverAssociation"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteObserverAssociation_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","ObserverAssociationVO",lazy=False)(pname=(ns,"association"), aname="_association", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteObserverAssociation")
            kw["aname"] = "_deleteObserverAssociation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._association = []
                    return
            Holder.__name__ = "deleteObserverAssociation_Holder"
            self.pyclass = Holder

    class deleteObserverAssociationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteObserverAssociationResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteObserverAssociationResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteObserverAssociationResponse")
            kw["aname"] = "_deleteObserverAssociationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteObserverAssociationResponse_Holder"
            self.pyclass = Holder

    class deleteUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteUser"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteUser_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"userId"), aname="_userId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteUser")
            kw["aname"] = "_deleteUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userId = []
                    return
            Holder.__name__ = "deleteUser_Holder"
            self.pyclass = Holder

    class deleteUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteUserResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteUserResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteUserResponse")
            kw["aname"] = "_deleteUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteUserResponse_Holder"
            self.pyclass = Holder

    class deleteUserByInstitutionRole_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteUserByInstitutionRole"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteUserByInstitutionRole_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"insRoleId"), aname="_insRoleId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteUserByInstitutionRole")
            kw["aname"] = "_deleteUserByInstitutionRole"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._insRoleId = []
                    return
            Holder.__name__ = "deleteUserByInstitutionRole_Holder"
            self.pyclass = Holder

    class deleteUserByInstitutionRoleResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteUserByInstitutionRoleResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.deleteUserByInstitutionRoleResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","deleteUserByInstitutionRoleResponse")
            kw["aname"] = "_deleteUserByInstitutionRoleResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteUserByInstitutionRoleResponse_Holder"
            self.pyclass = Holder

    class getSystemRoles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSystemRoles"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getSystemRoles_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getSystemRoles")
            kw["aname"] = "_getSystemRoles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = []
                    return
            Holder.__name__ = "getSystemRoles_Holder"
            self.pyclass = Holder

    class getSystemRolesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSystemRolesResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.getSystemRolesResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","getSystemRolesResponse")
            kw["aname"] = "_getSystemRolesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getSystemRolesResponse_Holder"
            self.pyclass = Holder

    class saveAddressBookEntry_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveAddressBookEntry"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.saveAddressBookEntry_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","AddressBookEntryVO",lazy=False)(pname=(ns,"user"), aname="_user", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","saveAddressBookEntry")
            kw["aname"] = "_saveAddressBookEntry"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user = []
                    return
            Holder.__name__ = "saveAddressBookEntry_Holder"
            self.pyclass = Holder

    class saveAddressBookEntryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveAddressBookEntryResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.saveAddressBookEntryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","saveAddressBookEntryResponse")
            kw["aname"] = "_saveAddressBookEntryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "saveAddressBookEntryResponse_Holder"
            self.pyclass = Holder

    class saveObserverAssociation_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveObserverAssociation"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.saveObserverAssociation_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","ObserverAssociationVO",lazy=False)(pname=(ns,"association"), aname="_association", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","saveObserverAssociation")
            kw["aname"] = "_saveObserverAssociation"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._association = []
                    return
            Holder.__name__ = "saveObserverAssociation_Holder"
            self.pyclass = Holder

    class saveObserverAssociationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveObserverAssociationResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.saveObserverAssociationResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","saveObserverAssociationResponse")
            kw["aname"] = "_saveObserverAssociationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "saveObserverAssociationResponse_Holder"
            self.pyclass = Holder

    class saveUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveUser"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.saveUser_Dec.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","UserVO",lazy=False)(pname=(ns,"user"), aname="_user", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","saveUser")
            kw["aname"] = "_saveUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._user = []
                    return
            Holder.__name__ = "saveUser_Holder"
            self.pyclass = Holder

    class saveUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveUserResponse"
        schema = "http://user.ws.blackboard"
        def __init__(self, **kw):
            ns = user_ns1.saveUserResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://user.ws.blackboard","saveUserResponse")
            kw["aname"] = "_saveUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "saveUserResponse_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://user.ws.blackboard)

##############################
# targetNamespace
# http://ws.platform.blackboard/xsd
##############################

class user_ns0:
    targetNamespace = "http://ws.platform.blackboard/xsd"

    class VersionVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.platform.blackboard/xsd"
        type = (schema, "VersionVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns0.VersionVO_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"version"), aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    return
            Holder.__name__ = "VersionVO_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://ws.platform.blackboard/xsd)

##############################
# targetNamespace
# http://user.ws.blackboard/xsd
##############################

class user_ns2:
    targetNamespace = "http://user.ws.blackboard/xsd"

    class UserFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://user.ws.blackboard/xsd"
        type = (schema, "UserFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns2.UserFilter_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"batchId"), aname="_batchId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"filterType"), aname="_filterType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupId"), aname="_groupId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"systemRoles"), aname="_systemRoles", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._batchId = []
                    self._courseId = []
                    self._expansionData = []
                    self._filterType = None
                    self._groupId = []
                    self._id = []
                    self._name = []
                    self._systemRoles = []
                    return
            Holder.__name__ = "UserFilter_Holder"
            self.pyclass = Holder

    class AddressBookEntryVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://user.ws.blackboard/xsd"
        type = (schema, "AddressBookEntryVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns2.AddressBookEntryVO_Def.schema
            TClist = [GTD("http://user.ws.blackboard/xsd","UserExtendedInfoVO",lazy=False)(pname=(ns,"addressBookEntry"), aname="_addressBookEntry", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userId"), aname="_userId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._addressBookEntry = None
                    self._expansionData = []
                    self._id = None
                    self._title = None
                    self._userId = None
                    return
            Holder.__name__ = "AddressBookEntryVO_Holder"
            self.pyclass = Holder

    class UserExtendedInfoVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://user.ws.blackboard/xsd"
        type = (schema, "UserExtendedInfoVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns2.UserExtendedInfoVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"businessFax"), aname="_businessFax", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessPhone1"), aname="_businessPhone1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"businessPhone2"), aname="_businessPhone2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"city"), aname="_city", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"company"), aname="_company", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"country"), aname="_country", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"department"), aname="_department", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"emailAddress"), aname="_emailAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"familyName"), aname="_familyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"givenName"), aname="_givenName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"homeFax"), aname="_homeFax", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"homePhone1"), aname="_homePhone1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"homePhone2"), aname="_homePhone2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"jobTitle"), aname="_jobTitle", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"middleName"), aname="_middleName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"mobilePhone"), aname="_mobilePhone", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"state"), aname="_state", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"street1"), aname="_street1", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"street2"), aname="_street2", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"webPage"), aname="_webPage", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"zipCode"), aname="_zipCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._businessFax = None
                    self._businessPhone1 = None
                    self._businessPhone2 = None
                    self._city = None
                    self._company = None
                    self._country = None
                    self._department = None
                    self._emailAddress = None
                    self._expansionData = []
                    self._familyName = None
                    self._givenName = None
                    self._homeFax = None
                    self._homePhone1 = None
                    self._homePhone2 = None
                    self._jobTitle = None
                    self._middleName = None
                    self._mobilePhone = None
                    self._state = None
                    self._street1 = None
                    self._street2 = None
                    self._webPage = None
                    self._zipCode = None
                    return
            Holder.__name__ = "UserExtendedInfoVO_Holder"
            self.pyclass = Holder

    class ObserverAssociationVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://user.ws.blackboard/xsd"
        type = (schema, "ObserverAssociationVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns2.ObserverAssociationVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"observeeId"), aname="_observeeId", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"observeeIdByName"), aname="_observeeIdByName", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"observerId"), aname="_observerId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._expansionData = []
                    self._observeeId = []
                    self._observeeIdByName = []
                    self._observerId = None
                    return
            Holder.__name__ = "ObserverAssociationVO_Holder"
            self.pyclass = Holder

    class PortalRoleVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://user.ws.blackboard/xsd"
        type = (schema, "PortalRoleVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns2.PortalRoleVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roleName"), aname="_roleName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._dataSourceId = None
                    self._description = None
                    self._expansionData = []
                    self._id = None
                    self._roleName = None
                    return
            Holder.__name__ = "PortalRoleVO_Holder"
            self.pyclass = Holder

    class UserRoleVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://user.ws.blackboard/xsd"
        type = (schema, "UserRoleVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns2.UserRoleVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"insRoleId"), aname="_insRoleId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userId"), aname="_userId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._expansionData = []
                    self._id = None
                    self._insRoleId = None
                    self._userId = None
                    return
            Holder.__name__ = "UserRoleVO_Holder"
            self.pyclass = Holder

    class UserVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://user.ws.blackboard/xsd"
        type = (schema, "UserVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = user_ns2.UserVO_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"birthDate"), aname="_birthDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"educationLevel"), aname="_educationLevel", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://user.ws.blackboard/xsd","UserExtendedInfoVO",lazy=False)(pname=(ns,"extendedInfo"), aname="_extendedInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"genderType"), aname="_genderType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"insRoles"), aname="_insRoles", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"isAvailable"), aname="_isAvailable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"studentId"), aname="_studentId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"systemRoles"), aname="_systemRoles", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userBatchUid"), aname="_userBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._birthDate = None
                    self._dataSourceId = None
                    self._educationLevel = None
                    self._expansionData = []
                    self._extendedInfo = None
                    self._genderType = None
                    self._id = None
                    self._insRoles = []
                    self._isAvailable = None
                    self._name = None
                    self._password = None
                    self._studentId = None
                    self._systemRoles = []
                    self._title = None
                    self._userBatchUid = None
                    return
            Holder.__name__ = "UserVO_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://user.ws.blackboard/xsd)
