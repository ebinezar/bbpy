################################################## 
# CourseMembership_WS_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://coursemembership.ws.blackboard/xsd
##############################

class course_membership_ns2:
    targetNamespace = "http://coursemembership.ws.blackboard/xsd"

    class CourseRoleFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://coursemembership.ws.blackboard/xsd"
        type = (schema, "CourseRoleFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_membership_ns2.CourseRoleFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"roleIds"), aname="_roleIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._roleIds = []
                    return
            Holder.__name__ = "CourseRoleFilter_Holder"
            self.pyclass = Holder

    class CourseMembershipRoleVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://coursemembership.ws.blackboard/xsd"
        type = (schema, "CourseMembershipRoleVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_membership_ns2.CourseMembershipRoleVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseRoleDescription"), aname="_courseRoleDescription", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"defaultRole"), aname="_defaultRole", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orgRoleDescription"), aname="_orgRoleDescription", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roleIdentifier"), aname="_roleIdentifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseRoleDescription = None
                    self._defaultRole = None
                    self._expansionData = []
                    self._orgRoleDescription = None
                    self._roleIdentifier = None
                    return
            Holder.__name__ = "CourseMembershipRoleVO_Holder"
            self.pyclass = Holder

    class MembershipFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://coursemembership.ws.blackboard/xsd"
        type = (schema, "MembershipFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_membership_ns2.MembershipFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseIds"), aname="_courseIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseMembershipIds"), aname="_courseMembershipIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"filterType"), aname="_filterType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupIds"), aname="_groupIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupMembershipIds"), aname="_groupMembershipIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roleIds"), aname="_roleIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userIds"), aname="_userIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseIds = []
                    self._courseMembershipIds = []
                    self._expansionData = []
                    self._filterType = None
                    self._groupIds = []
                    self._groupMembershipIds = []
                    self._roleIds = []
                    self._userIds = []
                    return
            Holder.__name__ = "MembershipFilter_Holder"
            self.pyclass = Holder

    class CourseMembershipVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://coursemembership.ws.blackboard/xsd"
        type = (schema, "CourseMembershipVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_membership_ns2.CourseMembershipVO_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"enrollmentDate"), aname="_enrollmentDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasCartridgeAccess"), aname="_hasCartridgeAccess", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"imageFile"), aname="_imageFile", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"roleId"), aname="_roleId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userId"), aname="_userId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._courseId = None
                    self._dataSourceId = None
                    self._enrollmentDate = None
                    self._expansionData = []
                    self._hasCartridgeAccess = None
                    self._id = None
                    self._imageFile = None
                    self._roleId = None
                    self._userId = None
                    return
            Holder.__name__ = "CourseMembershipVO_Holder"
            self.pyclass = Holder

    class GroupMembershipVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://coursemembership.ws.blackboard/xsd"
        type = (schema, "GroupMembershipVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_membership_ns2.GroupMembershipVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseMembershipId"), aname="_courseMembershipId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupId"), aname="_groupId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupMembershipId"), aname="_groupMembershipId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseMembershipId = None
                    self._expansionData = []
                    self._groupId = None
                    self._groupMembershipId = None
                    return
            Holder.__name__ = "GroupMembershipVO_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://coursemembership.ws.blackboard/xsd)

##############################
# targetNamespace
# http://ws.platform.blackboard/xsd
##############################

class course_membership_ns0:
    targetNamespace = "http://ws.platform.blackboard/xsd"

    class VersionVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.platform.blackboard/xsd"
        type = (schema, "VersionVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_membership_ns0.VersionVO_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"version"), aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    return
            Holder.__name__ = "VersionVO_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://ws.platform.blackboard/xsd)

##############################
# targetNamespace
# http://coursemembership.ws.blackboard
##############################

class course_membership_ns1:
    targetNamespace = "http://coursemembership.ws.blackboard"

    class getServerVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersion"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getServerVersion_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"unused"), aname="_unused", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getServerVersion")
            kw["aname"] = "_getServerVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unused = None
                    return
            Holder.__name__ = "getServerVersion_Holder"
            self.pyclass = Holder

    class getServerVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersionResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getServerVersionResponse_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getServerVersionResponse")
            kw["aname"] = "_getServerVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getServerVersionResponse_Holder"
            self.pyclass = Holder

    class getCourseRoles_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourseRoles"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getCourseRoles_Dec.schema
            TClist = [GTD("http://coursemembership.ws.blackboard/xsd","CourseRoleFilter",lazy=False)(pname=(ns,"f"), aname="_f", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getCourseRoles")
            kw["aname"] = "_getCourseRoles"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._f = None
                    return
            Holder.__name__ = "getCourseRoles_Holder"
            self.pyclass = Holder

    class getCourseRolesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourseRolesResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getCourseRolesResponse_Dec.schema
            TClist = [GTD("http://coursemembership.ws.blackboard/xsd","CourseMembershipRoleVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getCourseRolesResponse")
            kw["aname"] = "_getCourseRolesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getCourseRolesResponse_Holder"
            self.pyclass = Holder

    class getCourseMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourseMembership"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getCourseMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://coursemembership.ws.blackboard/xsd","MembershipFilter",lazy=False)(pname=(ns,"f"), aname="_f", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getCourseMembership")
            kw["aname"] = "_getCourseMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._f = None
                    return
            Holder.__name__ = "getCourseMembership_Holder"
            self.pyclass = Holder

    class getCourseMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourseMembershipResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getCourseMembershipResponse_Dec.schema
            TClist = [GTD("http://coursemembership.ws.blackboard/xsd","CourseMembershipVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getCourseMembershipResponse")
            kw["aname"] = "_getCourseMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getCourseMembershipResponse_Holder"
            self.pyclass = Holder

    class getGroupMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGroupMembership"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getGroupMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://coursemembership.ws.blackboard/xsd","MembershipFilter",lazy=False)(pname=(ns,"f"), aname="_f", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getGroupMembership")
            kw["aname"] = "_getGroupMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._f = None
                    return
            Holder.__name__ = "getGroupMembership_Holder"
            self.pyclass = Holder

    class getGroupMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGroupMembershipResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.getGroupMembershipResponse_Dec.schema
            TClist = [GTD("http://coursemembership.ws.blackboard/xsd","GroupMembershipVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","getGroupMembershipResponse")
            kw["aname"] = "_getGroupMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getGroupMembershipResponse_Holder"
            self.pyclass = Holder

    class initializeCourseMembershipWS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeCourseMembershipWS"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.initializeCourseMembershipWS_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ignore"), aname="_ignore", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","initializeCourseMembershipWS")
            kw["aname"] = "_initializeCourseMembershipWS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ignore = None
                    return
            Holder.__name__ = "initializeCourseMembershipWS_Holder"
            self.pyclass = Holder

    class initializeCourseMembershipWSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeCourseMembershipWSResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.initializeCourseMembershipWSResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","initializeCourseMembershipWSResponse")
            kw["aname"] = "_initializeCourseMembershipWSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "initializeCourseMembershipWSResponse_Holder"
            self.pyclass = Holder

    class deleteCourseMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourseMembership"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.deleteCourseMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ids"), aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","deleteCourseMembership")
            kw["aname"] = "_deleteCourseMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._ids = []
                    return
            Holder.__name__ = "deleteCourseMembership_Holder"
            self.pyclass = Holder

    class deleteCourseMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourseMembershipResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.deleteCourseMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","deleteCourseMembershipResponse")
            kw["aname"] = "_deleteCourseMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteCourseMembershipResponse_Holder"
            self.pyclass = Holder

    class deleteGroupMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteGroupMembership"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.deleteGroupMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ids"), aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","deleteGroupMembership")
            kw["aname"] = "_deleteGroupMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._ids = []
                    return
            Holder.__name__ = "deleteGroupMembership_Holder"
            self.pyclass = Holder

    class deleteGroupMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteGroupMembershipResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.deleteGroupMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","deleteGroupMembershipResponse")
            kw["aname"] = "_deleteGroupMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteGroupMembershipResponse_Holder"
            self.pyclass = Holder

    class saveCourseMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourseMembership"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.saveCourseMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://coursemembership.ws.blackboard/xsd","CourseMembershipVO",lazy=False)(pname=(ns,"cmArray"), aname="_cmArray", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","saveCourseMembership")
            kw["aname"] = "_saveCourseMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._cmArray = []
                    return
            Holder.__name__ = "saveCourseMembership_Holder"
            self.pyclass = Holder

    class saveCourseMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourseMembershipResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.saveCourseMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","saveCourseMembershipResponse")
            kw["aname"] = "_saveCourseMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "saveCourseMembershipResponse_Holder"
            self.pyclass = Holder

    class saveGroupMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveGroupMembership"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.saveGroupMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://coursemembership.ws.blackboard/xsd","GroupMembershipVO",lazy=False)(pname=(ns,"g"), aname="_g", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","saveGroupMembership")
            kw["aname"] = "_saveGroupMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._g = []
                    return
            Holder.__name__ = "saveGroupMembership_Holder"
            self.pyclass = Holder

    class saveGroupMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveGroupMembershipResponse"
        schema = "http://coursemembership.ws.blackboard"
        def __init__(self, **kw):
            ns = course_membership_ns1.saveGroupMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://coursemembership.ws.blackboard","saveGroupMembershipResponse")
            kw["aname"] = "_saveGroupMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "saveGroupMembershipResponse_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://coursemembership.ws.blackboard)
