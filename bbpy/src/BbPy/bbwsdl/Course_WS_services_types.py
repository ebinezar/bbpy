################################################## 
# Course_WS_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://course.ws.blackboard/xsd
##############################

class course_ns1:
    targetNamespace = "http://course.ws.blackboard/xsd"

    class CartridgeVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "CartridgeVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.CartridgeVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"identifier"), aname="_identifier", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"publisherName"), aname="_publisherName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._expansionData = []
                    self._id = None
                    self._identifier = None
                    self._publisherName = None
                    self._title = None
                    return
            Holder.__name__ = "CartridgeVO_Holder"
            self.pyclass = Holder

    class CategoryMembershipFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "CategoryMembershipFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.CategoryMembershipFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"filterType"), aname="_filterType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://course.ws.blackboard/xsd","CategoryMembershipVO",lazy=False)(pname=(ns,"templateCategoryMembership"), aname="_templateCategoryMembership", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._expansionData = []
                    self._filterType = None
                    self._templateCategoryMembership = []
                    return
            Holder.__name__ = "CategoryMembershipFilter_Holder"
            self.pyclass = Holder

    class CategoryMembershipVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "CategoryMembershipVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.CategoryMembershipVO_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"categoryId"), aname="_categoryId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"organization"), aname="_organization", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._categoryId = None
                    self._courseId = None
                    self._dataSourceId = None
                    self._expansionData = []
                    self._id = None
                    self._organization = None
                    return
            Holder.__name__ = "CategoryMembershipVO_Holder"
            self.pyclass = Holder

    class CategoryFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "CategoryFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.CategoryFilter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"filterType"), aname="_filterType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://course.ws.blackboard/xsd","CategoryVO",lazy=False)(pname=(ns,"templateCategories"), aname="_templateCategories", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._expansionData = []
                    self._filterType = None
                    self._templateCategories = []
                    return
            Holder.__name__ = "CategoryFilter_Holder"
            self.pyclass = Holder

    class CategoryVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "CategoryVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.CategoryVO_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"batchUid"), aname="_batchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"frontPage"), aname="_frontPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"organization"), aname="_organization", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parentId"), aname="_parentId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"restricted"), aname="_restricted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._batchUid = None
                    self._dataSourceId = None
                    self._description = None
                    self._expansionData = []
                    self._frontPage = None
                    self._id = None
                    self._organization = None
                    self._parentId = None
                    self._restricted = None
                    self._title = None
                    return
            Holder.__name__ = "CategoryVO_Holder"
            self.pyclass = Holder

    class ClassificationVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "ClassificationVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.ClassificationVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"batchUid"), aname="_batchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parentId"), aname="_parentId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._batchUid = None
                    self._dataSourceId = None
                    self._expansionData = []
                    self._id = None
                    self._parentId = None
                    self._title = None
                    return
            Holder.__name__ = "ClassificationVO_Holder"
            self.pyclass = Holder

    class CourseFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "CourseFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.CourseFilter_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"batchUids"), aname="_batchUids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"categoryIds"), aname="_categoryIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseIds"), aname="_courseIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"courseTemplates"), aname="_courseTemplates", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceIds"), aname="_dataSourceIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"filterType"), aname="_filterType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ids"), aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"searchDate"), aname="_searchDate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"searchDateOperator"), aname="_searchDateOperator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"searchKey"), aname="_searchKey", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"searchOperator"), aname="_searchOperator", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"searchValue"), aname="_searchValue", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sourceBatchUids"), aname="_sourceBatchUids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userIds"), aname="_userIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._batchUids = []
                    self._categoryIds = []
                    self._courseIds = []
                    self._courseTemplates = []
                    self._dataSourceIds = []
                    self._expansionData = []
                    self._filterType = None
                    self._ids = []
                    self._searchDate = None
                    self._searchDateOperator = None
                    self._searchKey = None
                    self._searchOperator = None
                    self._searchValue = None
                    self._sourceBatchUids = []
                    self._userIds = []
                    return
            Holder.__name__ = "CourseFilter_Holder"
            self.pyclass = Holder

    class CourseVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "CourseVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.CourseVO_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"allowGuests"), aname="_allowGuests", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"allowObservers"), aname="_allowObservers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"batchUid"), aname="_batchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"buttonStyleBbId"), aname="_buttonStyleBbId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"buttonStyleShape"), aname="_buttonStyleShape", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"buttonStyleType"), aname="_buttonStyleType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"cartridgeId"), aname="_cartridgeId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"classificationId"), aname="_classificationId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseDuration"), aname="_courseDuration", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"coursePace"), aname="_coursePace", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseServiceLevel"), aname="_courseServiceLevel", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSourceId"), aname="_dataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"decAbsoluteLimit"), aname="_decAbsoluteLimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enrollmentAccessCode"), aname="_enrollmentAccessCode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"enrollmentEndDate"), aname="_enrollmentEndDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"enrollmentStartDate"), aname="_enrollmentStartDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"enrollmentType"), aname="_enrollmentType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPfloat(pname=(ns,"fee"), aname="_fee", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"hasDescriptionPage"), aname="_hasDescriptionPage", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"institutionName"), aname="_institutionName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"locale"), aname="_locale", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"localeEnforced"), aname="_localeEnforced", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"lockedOut"), aname="_lockedOut", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"navCollapsable"), aname="_navCollapsable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"navColorBg"), aname="_navColorBg", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"navColorFg"), aname="_navColorFg", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"navigationStyle"), aname="_navigationStyle", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"numberOfDaysOfUse"), aname="_numberOfDaysOfUse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"organization"), aname="_organization", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"showInCatalog"), aname="_showInCatalog", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"softLimit"), aname="_softLimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"startDate"), aname="_startDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"uploadLimit"), aname="_uploadLimit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._allowGuests = None
                    self._allowObservers = None
                    self._available = None
                    self._batchUid = None
                    self._buttonStyleBbId = None
                    self._buttonStyleShape = None
                    self._buttonStyleType = None
                    self._cartridgeId = None
                    self._classificationId = None
                    self._courseDuration = None
                    self._courseId = None
                    self._coursePace = None
                    self._courseServiceLevel = None
                    self._dataSourceId = None
                    self._decAbsoluteLimit = None
                    self._description = None
                    self._endDate = None
                    self._enrollmentAccessCode = None
                    self._enrollmentEndDate = None
                    self._enrollmentStartDate = None
                    self._enrollmentType = None
                    self._expansionData = []
                    self._fee = None
                    self._hasDescriptionPage = None
                    self._id = None
                    self._institutionName = None
                    self._locale = None
                    self._localeEnforced = None
                    self._lockedOut = None
                    self._name = None
                    self._navCollapsable = None
                    self._navColorBg = None
                    self._navColorFg = None
                    self._navigationStyle = None
                    self._numberOfDaysOfUse = None
                    self._organization = None
                    self._showInCatalog = None
                    self._softLimit = None
                    self._startDate = None
                    self._uploadLimit = None
                    return
            Holder.__name__ = "CourseVO_Holder"
            self.pyclass = Holder

    class GroupFilter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "GroupFilter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.GroupFilter_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"filterType"), aname="_filterType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupIds"), aname="_groupIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"userIds"), aname="_userIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._expansionData = []
                    self._filterType = None
                    self._groupIds = []
                    self._userIds = []
                    return
            Holder.__name__ = "GroupFilter_Holder"
            self.pyclass = Holder

    class GroupVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "GroupVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.GroupVO_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"descriptionType"), aname="_descriptionType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"groupTools"), aname="_groupTools", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._courseId = None
                    self._description = None
                    self._descriptionType = None
                    self._expansionData = []
                    self._groupTools = []
                    self._id = None
                    self._title = None
                    return
            Holder.__name__ = "GroupVO_Holder"
            self.pyclass = Holder

    class StaffInfoVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://course.ws.blackboard/xsd"
        type = (schema, "StaffInfoVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns1.StaffInfoVO_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"available"), aname="_available", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"biography"), aname="_biography", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"biographyType"), aname="_biographyType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"email"), aname="_email", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"expansionData"), aname="_expansionData", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"familyName"), aname="_familyName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"folder"), aname="_folder", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"givenName"), aname="_givenName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"homePageUrl"), aname="_homePageUrl", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"id"), aname="_id", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"officeAddress"), aname="_officeAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"officeHours"), aname="_officeHours", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parentId"), aname="_parentId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"persistentTitle"), aname="_persistentTitle", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"phone"), aname="_phone", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"position"), aname="_position", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"sirTitle"), aname="_sirTitle", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"titleColor"), aname="_titleColor", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._available = None
                    self._biography = None
                    self._biographyType = None
                    self._email = None
                    self._expansionData = []
                    self._familyName = None
                    self._folder = None
                    self._givenName = None
                    self._homePageUrl = None
                    self._id = None
                    self._officeAddress = None
                    self._officeHours = None
                    self._parentId = None
                    self._persistentTitle = None
                    self._phone = None
                    self._position = None
                    self._sirTitle = None
                    self._title = None
                    self._titleColor = None
                    return
            Holder.__name__ = "StaffInfoVO_Holder"
            self.pyclass = Holder

# end class course_ns1 (tns: http://course.ws.blackboard/xsd)

##############################
# targetNamespace
# http://ws.platform.blackboard/xsd
##############################

class course_ns0:
    targetNamespace = "http://ws.platform.blackboard/xsd"

    class VersionVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.platform.blackboard/xsd"
        type = (schema, "VersionVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = course_ns0.VersionVO_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"version"), aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    return
            Holder.__name__ = "VersionVO_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://ws.platform.blackboard/xsd)

##############################
# targetNamespace
# http://course.ws.blackboard
##############################

class course_ns2:
    targetNamespace = "http://course.ws.blackboard"

    class getServerVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersion"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getServerVersion_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"unused"), aname="_unused", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getServerVersion")
            kw["aname"] = "_getServerVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unused = None
                    return
            Holder.__name__ = "getServerVersion_Holder"
            self.pyclass = Holder

    class getServerVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersionResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getServerVersionResponse_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getServerVersionResponse")
            kw["aname"] = "_getServerVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getServerVersionResponse_Holder"
            self.pyclass = Holder

    class getCartridge_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCartridge"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCartridge_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"cartridgeId"), aname="_cartridgeId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCartridge")
            kw["aname"] = "_getCartridge"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cartridgeId = None
                    return
            Holder.__name__ = "getCartridge_Holder"
            self.pyclass = Holder

    class getCartridgeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCartridgeResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCartridgeResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CartridgeVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCartridgeResponse")
            kw["aname"] = "_getCartridgeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getCartridgeResponse_Holder"
            self.pyclass = Holder

    class getCourseCategoryMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourseCategoryMembership"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCourseCategoryMembership_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryMembershipFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCourseCategoryMembership")
            kw["aname"] = "_getCourseCategoryMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    return
            Holder.__name__ = "getCourseCategoryMembership_Holder"
            self.pyclass = Holder

    class getCourseCategoryMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourseCategoryMembershipResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCourseCategoryMembershipResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryMembershipVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCourseCategoryMembershipResponse")
            kw["aname"] = "_getCourseCategoryMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getCourseCategoryMembershipResponse_Holder"
            self.pyclass = Holder

    class getOrgCategoryMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrgCategoryMembership"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getOrgCategoryMembership_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryMembershipFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getOrgCategoryMembership")
            kw["aname"] = "_getOrgCategoryMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    return
            Holder.__name__ = "getOrgCategoryMembership_Holder"
            self.pyclass = Holder

    class getOrgCategoryMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrgCategoryMembershipResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getOrgCategoryMembershipResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryMembershipVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getOrgCategoryMembershipResponse")
            kw["aname"] = "_getOrgCategoryMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getOrgCategoryMembershipResponse_Holder"
            self.pyclass = Holder

    class getCategories_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCategories"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCategories_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCategories")
            kw["aname"] = "_getCategories"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    return
            Holder.__name__ = "getCategories_Holder"
            self.pyclass = Holder

    class getCategoriesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCategoriesResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCategoriesResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCategoriesResponse")
            kw["aname"] = "_getCategoriesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getCategoriesResponse_Holder"
            self.pyclass = Holder

    class getClassifications_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getClassifications"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getClassifications_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"classificationIdMask"), aname="_classificationIdMask", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getClassifications")
            kw["aname"] = "_getClassifications"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._classificationIdMask = None
                    return
            Holder.__name__ = "getClassifications_Holder"
            self.pyclass = Holder

    class getClassificationsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getClassificationsResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getClassificationsResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","ClassificationVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getClassificationsResponse")
            kw["aname"] = "_getClassificationsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getClassificationsResponse_Holder"
            self.pyclass = Holder

    class getCourse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCourse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCourse")
            kw["aname"] = "_getCourse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    return
            Holder.__name__ = "getCourse_Holder"
            self.pyclass = Holder

    class getCourseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getCourseResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getCourseResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getCourseResponse")
            kw["aname"] = "_getCourseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getCourseResponse_Holder"
            self.pyclass = Holder

    class getOrg_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrg"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getOrg_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getOrg")
            kw["aname"] = "_getOrg"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._filter = None
                    return
            Holder.__name__ = "getOrg_Holder"
            self.pyclass = Holder

    class getOrgResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getOrgResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getOrgResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getOrgResponse")
            kw["aname"] = "_getOrgResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getOrgResponse_Holder"
            self.pyclass = Holder

    class getGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGroup"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getGroup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://course.ws.blackboard/xsd","GroupFilter",lazy=False)(pname=(ns,"filter"), aname="_filter", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getGroup")
            kw["aname"] = "_getGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._filter = None
                    return
            Holder.__name__ = "getGroup_Holder"
            self.pyclass = Holder

    class getGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getGroupResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getGroupResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","GroupVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getGroupResponse")
            kw["aname"] = "_getGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getGroupResponse_Holder"
            self.pyclass = Holder

    class getStaffInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStaffInfo"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getStaffInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getStaffInfo")
            kw["aname"] = "_getStaffInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    return
            Holder.__name__ = "getStaffInfo_Holder"
            self.pyclass = Holder

    class getStaffInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getStaffInfoResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getStaffInfoResponse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","StaffInfoVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getStaffInfoResponse")
            kw["aname"] = "_getStaffInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getStaffInfoResponse_Holder"
            self.pyclass = Holder

    class changeCourseBatchUid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeCourseBatchUid"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeCourseBatchUid_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"oldBatchUid"), aname="_oldBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newBatchUid"), aname="_newBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeCourseBatchUid")
            kw["aname"] = "_changeCourseBatchUid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._oldBatchUid = None
                    self._newBatchUid = None
                    return
            Holder.__name__ = "changeCourseBatchUid_Holder"
            self.pyclass = Holder

    class changeCourseBatchUidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeCourseBatchUidResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeCourseBatchUidResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeCourseBatchUidResponse")
            kw["aname"] = "_changeCourseBatchUidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeCourseBatchUidResponse_Holder"
            self.pyclass = Holder

    class changeCourseCategoryBatchUid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeCourseCategoryBatchUid"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeCourseCategoryBatchUid_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"categoryId"), aname="_categoryId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newBatchUid"), aname="_newBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeCourseCategoryBatchUid")
            kw["aname"] = "_changeCourseCategoryBatchUid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryId = None
                    self._newBatchUid = None
                    return
            Holder.__name__ = "changeCourseCategoryBatchUid_Holder"
            self.pyclass = Holder

    class changeCourseCategoryBatchUidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeCourseCategoryBatchUidResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeCourseCategoryBatchUidResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeCourseCategoryBatchUidResponse")
            kw["aname"] = "_changeCourseCategoryBatchUidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeCourseCategoryBatchUidResponse_Holder"
            self.pyclass = Holder

    class changeCourseDataSourceId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeCourseDataSourceId"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeCourseDataSourceId_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newDataSourceId"), aname="_newDataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeCourseDataSourceId")
            kw["aname"] = "_changeCourseDataSourceId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._newDataSourceId = None
                    return
            Holder.__name__ = "changeCourseDataSourceId_Holder"
            self.pyclass = Holder

    class changeCourseDataSourceIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeCourseDataSourceIdResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeCourseDataSourceIdResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeCourseDataSourceIdResponse")
            kw["aname"] = "_changeCourseDataSourceIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeCourseDataSourceIdResponse_Holder"
            self.pyclass = Holder

    class changeOrgBatchUid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeOrgBatchUid"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeOrgBatchUid_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"oldBatchUid"), aname="_oldBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newBatchUid"), aname="_newBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeOrgBatchUid")
            kw["aname"] = "_changeOrgBatchUid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._oldBatchUid = None
                    self._newBatchUid = None
                    return
            Holder.__name__ = "changeOrgBatchUid_Holder"
            self.pyclass = Holder

    class changeOrgBatchUidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeOrgBatchUidResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeOrgBatchUidResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeOrgBatchUidResponse")
            kw["aname"] = "_changeOrgBatchUidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeOrgBatchUidResponse_Holder"
            self.pyclass = Holder

    class changeOrgCategoryBatchUid_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeOrgCategoryBatchUid"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeOrgCategoryBatchUid_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"categoryId"), aname="_categoryId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newBatchUid"), aname="_newBatchUid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeOrgCategoryBatchUid")
            kw["aname"] = "_changeOrgCategoryBatchUid"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryId = None
                    self._newBatchUid = None
                    return
            Holder.__name__ = "changeOrgCategoryBatchUid_Holder"
            self.pyclass = Holder

    class changeOrgCategoryBatchUidResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeOrgCategoryBatchUidResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeOrgCategoryBatchUidResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeOrgCategoryBatchUidResponse")
            kw["aname"] = "_changeOrgCategoryBatchUidResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeOrgCategoryBatchUidResponse_Holder"
            self.pyclass = Holder

    class changeOrgDataSourceId_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeOrgDataSourceId"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeOrgDataSourceId_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"newDataSourceId"), aname="_newDataSourceId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeOrgDataSourceId")
            kw["aname"] = "_changeOrgDataSourceId"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._newDataSourceId = None
                    return
            Holder.__name__ = "changeOrgDataSourceId_Holder"
            self.pyclass = Holder

    class changeOrgDataSourceIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "changeOrgDataSourceIdResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.changeOrgDataSourceIdResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","changeOrgDataSourceIdResponse")
            kw["aname"] = "_changeOrgDataSourceIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "changeOrgDataSourceIdResponse_Holder"
            self.pyclass = Holder

    class initializeCourseWS_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeCourseWS"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.initializeCourseWS_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"ignore"), aname="_ignore", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","initializeCourseWS")
            kw["aname"] = "_initializeCourseWS"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ignore = None
                    return
            Holder.__name__ = "initializeCourseWS_Holder"
            self.pyclass = Holder

    class initializeCourseWSResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeCourseWSResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.initializeCourseWSResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","initializeCourseWSResponse")
            kw["aname"] = "_initializeCourseWSResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "initializeCourseWSResponse_Holder"
            self.pyclass = Holder

    class setCourseBannerImage_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCourseBannerImage"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.setCourseBannerImage_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"removeOnly"), aname="_removeOnly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"fileName"), aname="_fileName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Base64String(pname=(ns,"fileContents"), aname="_fileContents", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","setCourseBannerImage")
            kw["aname"] = "_setCourseBannerImage"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._removeOnly = None
                    self._fileName = None
                    self._fileContents = None
                    return
            Holder.__name__ = "setCourseBannerImage_Holder"
            self.pyclass = Holder

    class setCourseBannerImageResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "setCourseBannerImageResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.setCourseBannerImageResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","setCourseBannerImageResponse")
            kw["aname"] = "_setCourseBannerImageResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "setCourseBannerImageResponse_Holder"
            self.pyclass = Holder

    class createCourse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createCourse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.createCourse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"c"), aname="_c", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","createCourse")
            kw["aname"] = "_createCourse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c = None
                    return
            Holder.__name__ = "createCourse_Holder"
            self.pyclass = Holder

    class createCourseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createCourseResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.createCourseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","createCourseResponse")
            kw["aname"] = "_createCourseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "createCourseResponse_Holder"
            self.pyclass = Holder

    class createOrg_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createOrg"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.createOrg_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"c"), aname="_c", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","createOrg")
            kw["aname"] = "_createOrg"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c = None
                    return
            Holder.__name__ = "createOrg_Holder"
            self.pyclass = Holder

    class createOrgResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "createOrgResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.createOrgResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","createOrgResponse")
            kw["aname"] = "_createOrgResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "createOrgResponse_Holder"
            self.pyclass = Holder

    class deleteCartridge_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCartridge"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCartridge_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"cartridgeId"), aname="_cartridgeId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCartridge")
            kw["aname"] = "_deleteCartridge"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cartridgeId = None
                    return
            Holder.__name__ = "deleteCartridge_Holder"
            self.pyclass = Holder

    class deleteCartridgeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCartridgeResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCartridgeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCartridgeResponse")
            kw["aname"] = "_deleteCartridgeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "deleteCartridgeResponse_Holder"
            self.pyclass = Holder

    class saveCartridge_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCartridge"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCartridge_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CartridgeVO",lazy=False)(pname=(ns,"vo"), aname="_vo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCartridge")
            kw["aname"] = "_saveCartridge"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vo = None
                    return
            Holder.__name__ = "saveCartridge_Holder"
            self.pyclass = Holder

    class saveCartridgeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCartridgeResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCartridgeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCartridgeResponse")
            kw["aname"] = "_saveCartridgeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveCartridgeResponse_Holder"
            self.pyclass = Holder

    class saveCourse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCourse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"c"), aname="_c", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCourse")
            kw["aname"] = "_saveCourse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c = None
                    return
            Holder.__name__ = "saveCourse_Holder"
            self.pyclass = Holder

    class saveCourseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourseResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCourseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCourseResponse")
            kw["aname"] = "_saveCourseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveCourseResponse_Holder"
            self.pyclass = Holder

    class saveCourseCategory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourseCategory"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCourseCategory_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryVO",lazy=False)(pname=(ns,"adminCategory"), aname="_adminCategory", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCourseCategory")
            kw["aname"] = "_saveCourseCategory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adminCategory = None
                    return
            Holder.__name__ = "saveCourseCategory_Holder"
            self.pyclass = Holder

    class saveCourseCategoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourseCategoryResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCourseCategoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCourseCategoryResponse")
            kw["aname"] = "_saveCourseCategoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveCourseCategoryResponse_Holder"
            self.pyclass = Holder

    class saveCourseCategoryMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourseCategoryMembership"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCourseCategoryMembership_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryMembershipVO",lazy=False)(pname=(ns,"membership"), aname="_membership", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCourseCategoryMembership")
            kw["aname"] = "_saveCourseCategoryMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._membership = None
                    return
            Holder.__name__ = "saveCourseCategoryMembership_Holder"
            self.pyclass = Holder

    class saveCourseCategoryMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveCourseCategoryMembershipResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveCourseCategoryMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveCourseCategoryMembershipResponse")
            kw["aname"] = "_saveCourseCategoryMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveCourseCategoryMembershipResponse_Holder"
            self.pyclass = Holder

    class saveGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveGroup"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveGroup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://course.ws.blackboard/xsd","GroupVO",lazy=False)(pname=(ns,"vo"), aname="_vo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveGroup")
            kw["aname"] = "_saveGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._vo = None
                    return
            Holder.__name__ = "saveGroup_Holder"
            self.pyclass = Holder

    class saveGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveGroupResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveGroupResponse")
            kw["aname"] = "_saveGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveGroupResponse_Holder"
            self.pyclass = Holder

    class saveOrgCategory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveOrgCategory"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveOrgCategory_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryVO",lazy=False)(pname=(ns,"adminCategory"), aname="_adminCategory", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveOrgCategory")
            kw["aname"] = "_saveOrgCategory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._adminCategory = None
                    return
            Holder.__name__ = "saveOrgCategory_Holder"
            self.pyclass = Holder

    class saveOrgCategoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveOrgCategoryResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveOrgCategoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveOrgCategoryResponse")
            kw["aname"] = "_saveOrgCategoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveOrgCategoryResponse_Holder"
            self.pyclass = Holder

    class saveOrgCategoryMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveOrgCategoryMembership"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveOrgCategoryMembership_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CategoryMembershipVO",lazy=False)(pname=(ns,"membership"), aname="_membership", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveOrgCategoryMembership")
            kw["aname"] = "_saveOrgCategoryMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._membership = None
                    return
            Holder.__name__ = "saveOrgCategoryMembership_Holder"
            self.pyclass = Holder

    class saveOrgCategoryMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveOrgCategoryMembershipResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveOrgCategoryMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveOrgCategoryMembershipResponse")
            kw["aname"] = "_saveOrgCategoryMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveOrgCategoryMembershipResponse_Holder"
            self.pyclass = Holder

    class saveStaffInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveStaffInfo"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveStaffInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("http://course.ws.blackboard/xsd","StaffInfoVO",lazy=False)(pname=(ns,"vo"), aname="_vo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveStaffInfo")
            kw["aname"] = "_saveStaffInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._vo = None
                    return
            Holder.__name__ = "saveStaffInfo_Holder"
            self.pyclass = Holder

    class saveStaffInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "saveStaffInfoResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.saveStaffInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","saveStaffInfoResponse")
            kw["aname"] = "_saveStaffInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "saveStaffInfoResponse_Holder"
            self.pyclass = Holder

    class updateCourse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateCourse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.updateCourse_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"c"), aname="_c", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","updateCourse")
            kw["aname"] = "_updateCourse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c = None
                    return
            Holder.__name__ = "updateCourse_Holder"
            self.pyclass = Holder

    class updateCourseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateCourseResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.updateCourseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","updateCourseResponse")
            kw["aname"] = "_updateCourseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "updateCourseResponse_Holder"
            self.pyclass = Holder

    class updateOrg_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateOrg"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.updateOrg_Dec.schema
            TClist = [GTD("http://course.ws.blackboard/xsd","CourseVO",lazy=False)(pname=(ns,"c"), aname="_c", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","updateOrg")
            kw["aname"] = "_updateOrg"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._c = None
                    return
            Holder.__name__ = "updateOrg_Holder"
            self.pyclass = Holder

    class updateOrgResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "updateOrgResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.updateOrgResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","updateOrgResponse")
            kw["aname"] = "_updateOrgResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "updateOrgResponse_Holder"
            self.pyclass = Holder

    class deleteCourse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCourse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ids"), aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCourse")
            kw["aname"] = "_deleteCourse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ids = []
                    return
            Holder.__name__ = "deleteCourse_Holder"
            self.pyclass = Holder

    class deleteCourseResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourseResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCourseResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCourseResponse")
            kw["aname"] = "_deleteCourseResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteCourseResponse_Holder"
            self.pyclass = Holder

    class deleteCourseCategory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourseCategory"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCourseCategory_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"categoryIds"), aname="_categoryIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCourseCategory")
            kw["aname"] = "_deleteCourseCategory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryIds = []
                    return
            Holder.__name__ = "deleteCourseCategory_Holder"
            self.pyclass = Holder

    class deleteCourseCategoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourseCategoryResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCourseCategoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCourseCategoryResponse")
            kw["aname"] = "_deleteCourseCategoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteCourseCategoryResponse_Holder"
            self.pyclass = Holder

    class deleteCourseCategoryMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourseCategoryMembership"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCourseCategoryMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"categoryMembershipIds"), aname="_categoryMembershipIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCourseCategoryMembership")
            kw["aname"] = "_deleteCourseCategoryMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryMembershipIds = []
                    return
            Holder.__name__ = "deleteCourseCategoryMembership_Holder"
            self.pyclass = Holder

    class deleteCourseCategoryMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteCourseCategoryMembershipResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteCourseCategoryMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteCourseCategoryMembershipResponse")
            kw["aname"] = "_deleteCourseCategoryMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteCourseCategoryMembershipResponse_Holder"
            self.pyclass = Holder

    class deleteGroup_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteGroup"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteGroup_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"ids"), aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteGroup")
            kw["aname"] = "_deleteGroup"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._ids = []
                    return
            Holder.__name__ = "deleteGroup_Holder"
            self.pyclass = Holder

    class deleteGroupResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteGroupResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteGroupResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteGroupResponse")
            kw["aname"] = "_deleteGroupResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteGroupResponse_Holder"
            self.pyclass = Holder

    class deleteOrg_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteOrg"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteOrg_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ids"), aname="_ids", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteOrg")
            kw["aname"] = "_deleteOrg"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ids = []
                    return
            Holder.__name__ = "deleteOrg_Holder"
            self.pyclass = Holder

    class deleteOrgResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteOrgResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteOrgResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteOrgResponse")
            kw["aname"] = "_deleteOrgResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteOrgResponse_Holder"
            self.pyclass = Holder

    class deleteOrgCategory_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteOrgCategory"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteOrgCategory_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"categoryIds"), aname="_categoryIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteOrgCategory")
            kw["aname"] = "_deleteOrgCategory"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryIds = []
                    return
            Holder.__name__ = "deleteOrgCategory_Holder"
            self.pyclass = Holder

    class deleteOrgCategoryResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteOrgCategoryResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteOrgCategoryResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteOrgCategoryResponse")
            kw["aname"] = "_deleteOrgCategoryResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteOrgCategoryResponse_Holder"
            self.pyclass = Holder

    class deleteOrgCategoryMembership_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteOrgCategoryMembership"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteOrgCategoryMembership_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"categoryMembershipIds"), aname="_categoryMembershipIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteOrgCategoryMembership")
            kw["aname"] = "_deleteOrgCategoryMembership"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryMembershipIds = []
                    return
            Holder.__name__ = "deleteOrgCategoryMembership_Holder"
            self.pyclass = Holder

    class deleteOrgCategoryMembershipResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteOrgCategoryMembershipResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteOrgCategoryMembershipResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteOrgCategoryMembershipResponse")
            kw["aname"] = "_deleteOrgCategoryMembershipResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteOrgCategoryMembershipResponse_Holder"
            self.pyclass = Holder

    class deleteStaffInfo_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteStaffInfo"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteStaffInfo_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"staffInfoIds"), aname="_staffInfoIds", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteStaffInfo")
            kw["aname"] = "_deleteStaffInfo"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    self._staffInfoIds = []
                    return
            Holder.__name__ = "deleteStaffInfo_Holder"
            self.pyclass = Holder

    class deleteStaffInfoResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deleteStaffInfoResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.deleteStaffInfoResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","deleteStaffInfoResponse")
            kw["aname"] = "_deleteStaffInfoResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "deleteStaffInfoResponse_Holder"
            self.pyclass = Holder

    class getAvailableGroupTools_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAvailableGroupTools"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getAvailableGroupTools_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"courseId"), aname="_courseId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getAvailableGroupTools")
            kw["aname"] = "_getAvailableGroupTools"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._courseId = None
                    return
            Holder.__name__ = "getAvailableGroupTools_Holder"
            self.pyclass = Holder

    class getAvailableGroupToolsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getAvailableGroupToolsResponse"
        schema = "http://course.ws.blackboard"
        def __init__(self, **kw):
            ns = course_ns2.getAvailableGroupToolsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://course.ws.blackboard","getAvailableGroupToolsResponse")
            kw["aname"] = "_getAvailableGroupToolsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getAvailableGroupToolsResponse_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://course.ws.blackboard)
