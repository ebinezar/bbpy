################################################## 
# Context_WS_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://context.ws.blackboard/xsd
##############################

class context_ns1:
    targetNamespace = "http://context.ws.blackboard/xsd"

    class DeactivateToolResultVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://context.ws.blackboard/xsd"
        type = (schema, "DeactivateToolResultVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = context_ns1.DeactivateToolResultVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"failureErrors"), aname="_failureErrors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._failureErrors = []
                    self._status = None
                    return
            Holder.__name__ = "DeactivateToolResultVO_Holder"
            self.pyclass = Holder

    class RegisterToolResultVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://context.ws.blackboard/xsd"
        type = (schema, "RegisterToolResultVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = context_ns1.RegisterToolResultVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"failureErrors"), aname="_failureErrors", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"proxyToolGuid"), aname="_proxyToolGuid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"status"), aname="_status", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._failureErrors = []
                    self._proxyToolGuid = None
                    self._status = None
                    return
            Holder.__name__ = "RegisterToolResultVO_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://context.ws.blackboard/xsd)

##############################
# targetNamespace
# http://ws.platform.blackboard/xsd
##############################

class context_ns0:
    targetNamespace = "http://ws.platform.blackboard/xsd"

    class CourseIdVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.platform.blackboard/xsd"
        type = (schema, "CourseIdVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = context_ns0.CourseIdVO_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"externalId"), aname="_externalId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._externalId = None
                    return
            Holder.__name__ = "CourseIdVO_Holder"
            self.pyclass = Holder

    class VersionVO_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://ws.platform.blackboard/xsd"
        type = (schema, "VersionVO")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = context_ns0.VersionVO_Def.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"version"), aname="_version", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._version = None
                    return
            Holder.__name__ = "VersionVO_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://ws.platform.blackboard/xsd)

##############################
# targetNamespace
# http://context.ws.blackboard
##############################

class context_ns2:
    targetNamespace = "http://context.ws.blackboard"

    class getMemberships_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMemberships"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getMemberships_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"userid"), aname="_userid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getMemberships")
            kw["aname"] = "_getMemberships"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userid = None
                    return
            Holder.__name__ = "getMemberships_Holder"
            self.pyclass = Holder

    class getMembershipsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMembershipsResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getMembershipsResponse_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","CourseIdVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getMembershipsResponse")
            kw["aname"] = "_getMembershipsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getMembershipsResponse_Holder"
            self.pyclass = Holder

    class getMyMembershipsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getMyMembershipsResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getMyMembershipsResponse_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","CourseIdVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getMyMembershipsResponse")
            kw["aname"] = "_getMyMembershipsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getMyMembershipsResponse_Holder"
            self.pyclass = Holder

    class getServerVersion_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersion"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getServerVersion_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"unused"), aname="_unused", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getServerVersion")
            kw["aname"] = "_getServerVersion"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unused = None
                    return
            Holder.__name__ = "getServerVersion_Holder"
            self.pyclass = Holder

    class getServerVersionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getServerVersionResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getServerVersionResponse_Dec.schema
            TClist = [GTD("http://ws.platform.blackboard/xsd","VersionVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getServerVersionResponse")
            kw["aname"] = "_getServerVersionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getServerVersionResponse_Holder"
            self.pyclass = Holder

    class deactivateTool_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deactivateTool"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.deactivateTool_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ignore"), aname="_ignore", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","deactivateTool")
            kw["aname"] = "_deactivateTool"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ignore = None
                    return
            Holder.__name__ = "deactivateTool_Holder"
            self.pyclass = Holder

    class deactivateToolResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "deactivateToolResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.deactivateToolResponse_Dec.schema
            TClist = [GTD("http://context.ws.blackboard/xsd","DeactivateToolResultVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","deactivateToolResponse")
            kw["aname"] = "_deactivateToolResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "deactivateToolResponse_Holder"
            self.pyclass = Holder

    class registerTool_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "registerTool"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.registerTool_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"clientVendorId"), aname="_clientVendorId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientProgramId"), aname="_clientProgramId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"registrationPassword"), aname="_registrationPassword", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"initialSharedSecret"), aname="_initialSharedSecret", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requiredToolMethods"), aname="_requiredToolMethods", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requiredTicketMethods"), aname="_requiredTicketMethods", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","registerTool")
            kw["aname"] = "_registerTool"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._clientVendorId = None
                    self._clientProgramId = None
                    self._registrationPassword = None
                    self._description = None
                    self._initialSharedSecret = None
                    self._requiredToolMethods = []
                    self._requiredTicketMethods = []
                    return
            Holder.__name__ = "registerTool_Holder"
            self.pyclass = Holder

    class registerToolResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "registerToolResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.registerToolResponse_Dec.schema
            TClist = [GTD("http://context.ws.blackboard/xsd","RegisterToolResultVO",lazy=False)(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","registerToolResponse")
            kw["aname"] = "_registerToolResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "registerToolResponse_Holder"
            self.pyclass = Holder

    class emulateUser_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "emulateUser"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.emulateUser_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"userToEmulate"), aname="_userToEmulate", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","emulateUser")
            kw["aname"] = "_emulateUser"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userToEmulate = None
                    return
            Holder.__name__ = "emulateUser_Holder"
            self.pyclass = Holder

    class emulateUserResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "emulateUserResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.emulateUserResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","emulateUserResponse")
            kw["aname"] = "_emulateUserResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "emulateUserResponse_Holder"
            self.pyclass = Holder

    class extendSessionLife_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "extendSessionLife"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.extendSessionLife_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname=(ns,"additionalSeconds"), aname="_additionalSeconds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","extendSessionLife")
            kw["aname"] = "_extendSessionLife"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._additionalSeconds = None
                    return
            Holder.__name__ = "extendSessionLife_Holder"
            self.pyclass = Holder

    class extendSessionLifeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "extendSessionLifeResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.extendSessionLifeResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","extendSessionLifeResponse")
            kw["aname"] = "_extendSessionLifeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "extendSessionLifeResponse_Holder"
            self.pyclass = Holder

    class login_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "login"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.login_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"userid"), aname="_userid", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientVendorId"), aname="_clientVendorId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientProgramId"), aname="_clientProgramId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginExtraInfo"), aname="_loginExtraInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"expectedLifeSeconds"), aname="_expectedLifeSeconds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","login")
            kw["aname"] = "_login"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._userid = None
                    self._password = None
                    self._clientVendorId = None
                    self._clientProgramId = None
                    self._loginExtraInfo = None
                    self._expectedLifeSeconds = None
                    return
            Holder.__name__ = "login_Holder"
            self.pyclass = Holder

    class loginResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "loginResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.loginResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","loginResponse")
            kw["aname"] = "_loginResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "loginResponse_Holder"
            self.pyclass = Holder

    class loginTicket_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "loginTicket"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.loginTicket_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"ticket"), aname="_ticket", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientVendorId"), aname="_clientVendorId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientProgramId"), aname="_clientProgramId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginExtraInfo"), aname="_loginExtraInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"expectedLifeSeconds"), aname="_expectedLifeSeconds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","loginTicket")
            kw["aname"] = "_loginTicket"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ticket = None
                    self._clientVendorId = None
                    self._clientProgramId = None
                    self._loginExtraInfo = None
                    self._expectedLifeSeconds = None
                    return
            Holder.__name__ = "loginTicket_Holder"
            self.pyclass = Holder

    class loginTicketResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "loginTicketResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.loginTicketResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","loginTicketResponse")
            kw["aname"] = "_loginTicketResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "loginTicketResponse_Holder"
            self.pyclass = Holder

    class loginTool_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "loginTool"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.loginTool_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"password"), aname="_password", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientVendorId"), aname="_clientVendorId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"clientProgramId"), aname="_clientProgramId", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"loginExtraInfo"), aname="_loginExtraInfo", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"expectedLifeSeconds"), aname="_expectedLifeSeconds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","loginTool")
            kw["aname"] = "_loginTool"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._password = None
                    self._clientVendorId = None
                    self._clientProgramId = None
                    self._loginExtraInfo = None
                    self._expectedLifeSeconds = None
                    return
            Holder.__name__ = "loginTool_Holder"
            self.pyclass = Holder

    class loginToolResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "loginToolResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.loginToolResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","loginToolResponse")
            kw["aname"] = "_loginToolResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "loginToolResponse_Holder"
            self.pyclass = Holder

    class logoutResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "logoutResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.logoutResponse_Dec.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","logoutResponse")
            kw["aname"] = "_logoutResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "logoutResponse_Holder"
            self.pyclass = Holder

    class getSystemInstallationIdResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSystemInstallationIdResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getSystemInstallationIdResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getSystemInstallationIdResponse")
            kw["aname"] = "_getSystemInstallationIdResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getSystemInstallationIdResponse_Holder"
            self.pyclass = Holder

    class initializeResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.initializeResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","initializeResponse")
            kw["aname"] = "_initializeResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "initializeResponse_Holder"
            self.pyclass = Holder

    class initializeVersion2Response_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "initializeVersion2Response"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.initializeVersion2Response_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","initializeVersion2Response")
            kw["aname"] = "_initializeVersion2Response"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "initializeVersion2Response_Holder"
            self.pyclass = Holder

    class getRequiredEntitlements_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRequiredEntitlements"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getRequiredEntitlements_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"method"), aname="_method", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getRequiredEntitlements")
            kw["aname"] = "_getRequiredEntitlements"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._method = None
                    return
            Holder.__name__ = "getRequiredEntitlements_Holder"
            self.pyclass = Holder

    class getRequiredEntitlementsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRequiredEntitlementsResponse"
        schema = "http://context.ws.blackboard"
        def __init__(self, **kw):
            ns = context_ns2.getRequiredEntitlementsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"return"), aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://context.ws.blackboard","getRequiredEntitlementsResponse")
            kw["aname"] = "_getRequiredEntitlementsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getRequiredEntitlementsResponse_Holder"
            self.pyclass = Holder
    

# end class ns2 (tns: http://context.ws.blackboard)
